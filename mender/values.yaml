global:
  enterprise: false
  hosted: false
  auditlogs: true
  image:
    registry: registry.mender.io
    username: null
    password: null
    tag: mender-3.6.2
  mongodb:
    URL: mongodb://mongodb
  nats:
    URL: nats://mender-nats:4222
  redis:
    username: null
    password: null
    URL: ""
  storage: "aws"
  s3:
    AWS_URI: ""
    AWS_EXTERNAL_URI: ""
    AWS_BUCKET: mender-artifact-storage
    AWS_REGION: us-east-1
    AWS_ACCESS_KEY_ID: myaccesskey
    AWS_SECRET_ACCESS_KEY: mysecretkey
    AWS_FORCE_PATH_STYLE: "true"
    AWS_TAG_ARTIFACT: "true"
    AWS_SERVICE_ACCOUNT_NAME: ""
  azure:
    AUTH_CONNECTION_STRING: ""
    AUTH_SHARED_KEY_ACCOUNT_NAME: ""
    AUTH_SHARED_KEY_ACCOUNT_KEY: ""
    AUTH_SHARED_KEY_URI: ""
    CONTAINER_NAME: mender-artifact-storage
  smtp:
    EMAIL_SENDER: root@localhost
    SMTP_HOST: "localhost:25"
    SMTP_AUTH_MECHANISM: "PLAIN"
    SMTP_USERNAME: "null"
    SMTP_PASSWORD: "null"
    SMTP_SSL: "false"
  url: "https://mender-api-gateway"
  # guardrails for subcharts
  namespaceOverride: ""

# default values:
# these values applies to all resources
# and are applied when specific service values are not
# present
default:
  affinity: {}
  tolerations: {}

  # HorizontalPodAutoscaler default resources
  hpa: {}
    #enabled: true
    #minReplicas: 1
    #maxReplicas: 3
    #metrics: {}
    #behavior: {}

# Enabling this will publically expose your Mender instance.
ingress:
  enabled: false
  # For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
  # See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
  # ingressClassName: nginx

  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  # kubernetes.io/ingress.class: gce
  # kubernetes.io/ingress.class: alb
  # alb.ingress.kubernetes.io/healthcheck-path: /ui/
  # cert-manager.io/issuer: "letsencrypt"
  path: /
  extraPaths: []
    # - path: /*
    #   backend:
    #     serviceName: ssl-redirect
    #     servicePort: use-annotation
  hosts:
    - mender.example.org
  tls:
  # this secret must exists or can be created from a working cert-manager instance
   - secretName: mender-ingress-tls
     hosts:
       - mender.example.org

# Using default values from https://artifacthub.io/packages/helm/bitnami/mongodb
mongodb:
  enabled: false
  architecture: replicaset
  externalAccess:
    enabled: false
    service:
      type: LoadBalancer
  # replicaCount sets the number of secondaries (min: 2)
  replicaCount: 2
  # updateStrategy ensure that the nodes are updated one at the time to avoid downtime.
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  # PodDisruptionBudget ensure that the majority of nodes are available.
  # Make sure to update the PodDisruptionBudget if you increase the number of
  # replicas.
  pdb:
    enabled: true
    minAvailable: 2
    maxUnavailable: 1
  image:
    tag: "5.0.19-debian-11-r13"
  auth:
    enabled: true
    rootPassword: "pleasechangeme"
    replicaSetKey: "pleasechangeme"
    username: "mender"
    # reference to Bitnami chart only: the database name is managed by Mender only
    database: "mender"
  global:
    storageClass: ""
  commonAnnotations:
    helm.sh/hook: "pre-install"
    helm.sh/hook-weight: "-100"
  service:
    nameOverride: ""

# Using default values from https://github.com/nats-io/k8s/tree/main/helm/charts/nats
nats:
  enabled: false
  cluster:
    enabled: true
    replicas: 3
  fullnameOverride: ""
  nats:
    image: "nats:2.7.4-scratch"
    jetstream:
      enabled: true
      memStorage:
        enabled: true
        size: "1Gi"
      fileStorage:
        enabled: true
        size: "2Gi"
        storageDirectory: /data/
        storageClassName: ""

api_gateway:
  enabled: true
  podAnnotations: {}
  dashboard: false
  image:
    registry: docker.io
    repository: traefik
    tag: v2.10
    imagePullPolicy: IfNotPresent
  replicas: 1
  resources:
    limits:
      cpu: 600m
      memory: 1G
    requests:
      cpu: 600m
      memory: 512M
  affinity: {}
  nodeSelector: {}
  httpPort: 9080
  httpsPort: 9443
  service:
    name: mender-api-gateway
    annotations: {}
    type: ClusterIP
    httpPort: 80
    httpsPort: 443
  env:
    SSL: true
  minio:
    enabled: true
    podAnnotations: {}
    url: "http://minio:9000"
    customRule: null
  compression: true
  security_redirect: null
  rateLimit:
    average: 100
    burst: 100
    period: "1s"
    sourceCriterion:
      ipStrategy:
        depth: 1
  authRateLimit: null
  podSecurityContext:
    enabled: false
    runAsNonRoot: true
    runAsUser: 65534
  containerSecurityContext:
    enabled: false
    allowPrivilegeEscalation: false
    runAsUser: 65534
  hpa: {}

deployments:
  enabled: true
  podAnnotations: {}
  automigrate: false
  replicas: 1
  resources:
    limits:
      cpu: 300m
      memory: 128M
    requests:
      cpu: 300m
      memory: 64M
  affinity: {}
  directUpload:
    enabled: true
    jitter: "3s"
    skipVerify: false
  daemonSchedule: "15 * * * *"
  image:
    registry: ""
    repository: ""
    imagePullPolicy: IfNotPresent
  nodeSelector: {}
  service:
    name: mender-deployments
    annotations: {}
    type: ClusterIP
    port: 8080
  env:
    DEPLOYMENTS_MIDDLEWARE: prod
    DEPLOYMENTS_PRESIGN_SECRET: ""
  podSecurityContext:
    enabled: false
    runAsNonRoot: true
    runAsUser: 65534
  containerSecurityContext:
    enabled: false
    allowPrivilegeEscalation: false
    runAsUser: 65534
  hpa: {}

device_auth:
  enabled: true
  podAnnotations: {}
  automigrate: false
  replicas: 1
  resources:
    limits:
      cpu: 350m
      memory: 128M
    requests:
      cpu: 350m
      memory: 128M
  affinity: {}
  image:
    registry: ""
    repository: ""
    imagePullPolicy: IfNotPresent
  nodeSelector: {}
  service:
    name: mender-device-auth
    annotations: {}
    type: ClusterIP
    port: 8080
  env:
    DEVICEAUTH_INVENTORY_ADDR: http://mender-inventory:8080/
    DEVICEAUTH_ORCHESTRATOR_ADDR: http://mender-workflows-server:8080/
    DEVICEAUTH_JWT_ISSUER: Mender
    DEVICEAUTH_JWT_EXP_TIMEOUT: 604800
    DEVICEAUTH_MIDDLEWARE: prod
    DEVICEAUTH_REDIS_DB: "1"
    DEVICEAUTH_REDIS_TIMEOUT_SEC: "1"
    DEVICEAUTH_REDIS_LIMITS_EXPIRE_SEC: "3600"
    DEVICEAUTH_TENANTADM_ADDR: http://mender-tenantadm:8080
  podSecurityContext:
    enabled: false
    runAsNonRoot: true
    runAsUser: 65534
  containerSecurityContext:
    enabled: false
    allowPrivilegeEscalation: false
    runAsUser: 65534
  hpa: {}

# Generate Delta Worker feature
# Experimental feature, still in beta
# will be released in the next Mender versions
generate_delta_worker:
  enabled: false
  podAnnotations: {}
  automigrate: false
  replicas: 1
  resources:
    limits:
      cpu: 100m
      memory: 1024M
    requests:
      cpu: 100m
      memory: 128M
  affinity: {}
  image:
    registry: registry.mender.io
    repository: mendersoftware/generate-delta-worker
    tag: mender-3.5.0
    imagePullPolicy: IfNotPresent
  nodeSelector: {}

gui:
  enabled: true
  podAnnotations: {}
  replicas: 1
  resources:
    limits:
      cpu: 20m
      memory: 64M
    requests:
      cpu: 5m
      memory: 16M
  affinity: {}
  image:
    registry: docker.io
    repository: mendersoftware/gui
    imagePullPolicy: IfNotPresent
  nodeSelector: {}
  service:
    name: mender-gui
    annotations: {}
    type: ClusterIP
    port: 80
    portError: 8080
  httpPort: 80
  podSecurityContext:
    enabled: false
    runAsNonRoot: true
    runAsUser: 65534
  containerSecurityContext:
    enabled: false
    allowPrivilegeEscalation: false
    runAsUser: 65534

inventory:
  enabled: true
  podAnnotations: {}
  automigrate: false
  replicas: 1
  resources:
    limits:
      cpu: 300m
      memory: 128M
    requests:
      cpu: 300m
      memory: 128M
  affinity: {}
  image:
    registry: ""
    repository: ""
    imagePullPolicy: IfNotPresent
  nodeSelector: {}
  service:
    name: mender-inventory
    annotations: {}
    type: ClusterIP
    port: 8080
  env:
    INVENTORY_MIDDLEWARE: prod
  podSecurityContext:
    enabled: false
    runAsNonRoot: true
    runAsUser: 65534
  containerSecurityContext:
    enabled: false
    allowPrivilegeEscalation: false
    runAsUser: 65534
  hpa: {}

tenantadm:
  enabled: true
  podAnnotations: {}
  replicas: 1
  resources:
    limits:
      cpu: 150m
      memory: 128M
    requests:
      cpu: 150m
      memory: 64M
  affinity: {}
  image:
    registry: registry.mender.io
    repository: mendersoftware/tenantadm
    imagePullPolicy: IfNotPresent
  nodeSelector: {}
  service:
    name: mender-tenantadm
    annotations: {}
    type: ClusterIP
    port: 8080
  env:
    TENANTADM_DEFAULT_API_LIMITS: '{"management":{"bursts":[],"quota":{"max_calls":600,"interval_sec":60}},"devices":{"bursts":[{"action":"POST","uri":"/api/devices/v1/authentication","min_interval_sec":5},{"action":"GET","uri":"/api/devices/v1/deployments/device/deployments/next","min_interval_sec":5},{"action":"POST","uri":"/api/devices/v1/deployments/device/deployments/next","min_interval_sec":5},{"action":"POST","uri":"/api/devices/v2/deployments/device/deployments/next","min_interval_sec":5},{"action":"GET","uri":"/api/devices/v1/deviceconfig/configuration","min_interval_sec":5},{"action":"POST","uri":"/api/devices/v1/deviceconfig/configuration","min_interval_sec":5},{"action":"PATCH","uri":"/api/devices/v1/inventory/device/attributes","min_interval_sec":5},{"action":"PUT","uri":"/api/devices/v1/inventory/device/attributes","min_interval_sec":5},{"action":"POST","uri":"/api/devices/v1/devicemonitor/alert","min_interval_sec":5},{"action":"POST","uri":"/api/devices/v1/devicemonitor/alert","min_interval_sec":5},{"action":"POST","uri":"/api/devices/v1/devicemonitor/config","min_interval_sec":5}],"quota":{"max_calls":60,"interval_sec":60}}}'
    TENANTADM_MIDDLEWARE: prod
    TENANTADM_SERVER_PRIV_KEY_PATH: /etc/tenantadm/rsa/private.pem
    TENANTADM_ORCHESTRATOR_ADDR: http://mender-workflows-server:8080/
    TENANTADM_RECAPTCHA_URL_VERIFY: https://www.google.com/recaptcha/api/siteverify
  podSecurityContext:
    enabled: false
    runAsNonRoot: true
    runAsUser: 65534
  containerSecurityContext:
    enabled: false
    allowPrivilegeEscalation: false
    runAsUser: 65534
  hpa: {}

useradm:
  enabled: true
  podAnnotations: {}
  automigrate: false
  replicas: 1
  resources:
    limits:
      cpu: 150m
      memory: 128M
    requests:
      cpu: 150m
      memory: 64M
  affinity: {}
  image:
    registry: ""
    repository: ""
    imagePullPolicy: IfNotPresent
  nodeSelector: {}
  service:
    name: mender-useradm
    annotations: {}
    type: ClusterIP
    port: 8080
  env:
    USERADM_PROXY_COUNT: 2
    USERADM_JWT_ISSUER: Mender Users
    USERADM_JWT_EXP_TIMEOUT: 604800
    USERADM_MIDDLEWARE: prod
    USERADM_REDIS_DB: "1"
    USERADM_REDIS_TIMEOUT_SEC: "1"
    USERADM_REDIS_LIMITS_EXPIRE_SEC: "3600"
    USERADM_TENANTADM_ADDR: http://mender-tenantadm:8080
    USERADM_TOTP_ISSUER: Mender
  podSecurityContext:
    enabled: false
    runAsNonRoot: true
    runAsUser: 65534
  containerSecurityContext:
    enabled: false
    allowPrivilegeEscalation: false
    runAsUser: 65534
  hpa: {}

workflows:
  enabled: true
  podAnnotations: {}
  automigrate: false
  replicas: 1
  resources:
    limits:
      cpu: 100m
      memory: 128M
    requests:
      cpu: 10m
      memory: 64M
  affinity: {}
  image:
    registry: ""
    repository: ""
    imagePullPolicy: IfNotPresent
  nodeSelector: {}
  service:
    name: mender-workflows-server
    annotations: {}
    type: ClusterIP
    port: 8080
  podSecurityContext:
    enabled: false
    runAsNonRoot: true
    runAsUser: 65534
  containerSecurityContext:
    enabled: false
    allowPrivilegeEscalation: false
    runAsUser: 65534

create_artifact_worker:
  enabled: true
  podAnnotations: {}
  automigrate: false
  replicas: 1
  resources:
    limits:
      cpu: 100m
      memory: 1024M
    requests:
      cpu: 100m
      memory: 128M
  affinity: {}
  image:
    registry: docker.io
    repository: mendersoftware/create-artifact-worker
    imagePullPolicy: IfNotPresent
  nodeSelector: {}
  podSecurityContext:
    enabled: false
    runAsNonRoot: true
    runAsUser: 65534
  containerSecurityContext:
    enabled: false
    allowPrivilegeEscalation: false
    runAsUser: 65534

auditlogs:
  enabled: true
  podAnnotations: {}
  automigrate: false
  # logRetentionSeconds gives the number of seconds before an audit event is evicted from the database
  logRetentionSeconds: 2592000
  replicas: 1
  resources:
    limits:
      cpu: 50m
      memory: 128M
    requests:
      cpu: 50m
      memory: 128M
  affinity: {}
  image:
    registry: registry.mender.io
    repository: mendersoftware/auditlogs
    imagePullPolicy: IfNotPresent
  nodeSelector: {}
  service:
    name: mender-auditlogs
    annotations: {}
    type: ClusterIP
    port: 8080
  podSecurityContext:
    enabled: false
    runAsNonRoot: true
    runAsUser: 65534
  containerSecurityContext:
    enabled: false
    allowPrivilegeEscalation: false
    runAsUser: 65534
  hpa: {}

iot_manager:
  enabled: true
  podAnnotations: {}
  automigrate: false
  replicas: 1
  resources:
    limits:
      cpu: 50m
      memory: 128M
    requests:
      cpu: 50m
      memory: 128M
  affinity: {}
  image:
    registry: docker.io
    repository: mendersoftware/iot-manager
    imagePullPolicy: IfNotPresent
  nodeSelector: {}
  service:
    name: mender-iot-manager
    annotations: {}
    type: ClusterIP
    port: 8080
  podSecurityContext:
    enabled: false
    runAsNonRoot: true
    runAsUser: 65534
  containerSecurityContext:
    enabled: false
    allowPrivilegeEscalation: false
    runAsUser: 65534
  hpa: {}

deviceconnect:
  enabled: true
  podAnnotations: {}
  automigrate: false
  replicas: 1
  resources:
    limits:
      cpu: 100m
      memory: 128M
    requests:
      cpu: 100m
      memory: 128M
  affinity: {}
  image:
    registry: docker.io
    repository: mendersoftware/deviceconnect
    imagePullPolicy: IfNotPresent
  nodeSelector: {}
  service:
    name: mender-deviceconnect
    annotations: {}
    type: ClusterIP
    port: 8080
  podSecurityContext:
    enabled: false
    runAsNonRoot: true
    runAsUser: 65534
  containerSecurityContext:
    enabled: false
    allowPrivilegeEscalation: false
    runAsUser: 65534
  hpa: {}

deviceconfig:
  enabled: true
  podAnnotations: {}
  automigrate: false
  replicas: 1
  resources:
    limits:
      cpu: 100m
      memory: 128M
    requests:
      cpu: 100m
      memory: 128M
  affinity: {}
  image:
    registry: docker.io
    repository: mendersoftware/deviceconfig
    imagePullPolicy: IfNotPresent
  nodeSelector: {}
  service:
    name: mender-deviceconfig
    annotations: {}
    type: ClusterIP
    port: 8080
  podSecurityContext:
    enabled: false
    runAsNonRoot: true
    runAsUser: 65534
  containerSecurityContext:
    enabled: false
    allowPrivilegeEscalation: false
    runAsUser: 65534
  hpa: {}

devicemonitor:
  enabled: true
  podAnnotations: {}
  automigrate: false
  replicas: 1
  resources:
    limits:
      cpu: 100m
      memory: 128M
    requests:
      cpu: 100m
      memory: 128M
  affinity: {}
  image:
    registry: registry.mender.io
    repository: mendersoftware/devicemonitor
    imagePullPolicy: IfNotPresent
  nodeSelector: {}
  service:
    name: mender-devicemonitor
    annotations: {}
    type: ClusterIP
    port: 8080
  podSecurityContext:
    enabled: false
    runAsNonRoot: true
    runAsUser: 65534
  containerSecurityContext:
    enabled: false
    allowPrivilegeEscalation: false
    runAsUser: 65534
  hpa: {}

# Redis as a subchart
# Using a bitnami sub-chart by default = test usage only
# It's recommended to use a suitable Redis Cluster for Production
redis:
  enabled: true
  architecture: replication
  commonAnnotations:
    helm.sh/hook: "pre-install"
    helm.sh/hook-weight: "-50"
  auth:
    enabled: false
  commonConfiguration: |-
    appendonly no
    save ""
    tcp-keepalive 0
  master:
    persistence:
      enabled: false
  replica:
    persistence:
      enabled: false
  fullnameOverride: ""

dbmigration:
  enable: true
  annotations: {}
  backoffLimit: 5
  affinity: {}
  nodeSelector: {}
  podSecurityContext:
    enabled: false
    runAsNonRoot: true
    runAsUser: 999

# Feature preview: Device License Count
# Only available from version 3.6,
# and available in Mender Enterprise
device_license_count:
  enabled: false

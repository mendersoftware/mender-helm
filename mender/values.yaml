global:
  enterprise: true
  hosted: false
  auditlogs: true
  image:
    registry: registry.mender.io
    username: null
    password: null
    # Alternatively you can use a .docerconfigjson file:
    # dockerconfigjson: '{"auths":{"https://registry.mender.io/v1/":{"username":"my_username","password":"my_password","email":"me@example.org","auth":"b64 basic auth"}}}'
    tag: mender-3.4
  mongodb:
    URL: mongodb://mongodb
  nats:
    URL: nats://nats:4222
  storage: "aws"
  s3:
    # if using GCS:
    # AWS_URI: "https://storage.googleapis.com"
    AWS_URI: ""
    AWS_EXTERNAL_URI: ""
    AWS_BUCKET: mender-artifact-storage
    AWS_REGION: us-east-1
    AWS_ACCESS_KEY_ID: myaccesskey
    AWS_SECRET_ACCESS_KEY: mysecretkey
    AWS_FORCE_PATH_STYLE: "true"
    AWS_TAG_ARTIFACT: "true"
    AWS_SERVICE_ACCOUNT_NAME: ""
  azure:
    AUTH_CONNECTION_STRING: ""
    AUTH_SHARED_KEY_ACCOUNT_NAME: ""
    AUTH_SHARED_KEY_ACCOUNT_KEY: ""
    AUTH_SHARED_KEY_URI: ""
    CONTAINER_NAME: mender-artifact-storage
  smtp:
    EMAIL_SENDER: root@localhost
    SMTP_HOST: "localhost:25"
    SMTP_AUTH_MECHANISM: "PLAIN"
    SMTP_USERNAME: "null"
    SMTP_PASSWORD: "null"
    SMTP_SSL: "false"
  url: "https://mender-api-gateway"

# default values:
# these values applies to all resources
# and are applied when specific service values are not
# present
default:
  affinity: {}
  tolerations: {}

# Enabling this will publically expose your Mender instance.
ingress:
  enabled: false
  # For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
  # See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
  # ingressClassName: nginx

  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    # kubernetes.io/ingress.class: gce
    # kubernetes.io/ingress.class: alb
    # alb.ingress.kubernetes.io/healthcheck-path: /ui/
  path: /
  hosts:
    - mender.example.org
  tls: []
  #  - secretName: mender-example-org-tls
  #    hosts:
  #      - mender.example.org

# Using default values from https://artifacthub.io/packages/helm/bitnami/mongodb
mongodb:
  enabled: false
  architecture: standalone
  auth:
    enabled: false
  global:
    storageClass: "standard"
  commonAnnotations:
    helm.sh/hook: "pre-install"
    helm.sh/hook-weight: "-100"

# Using default values from https://github.com/nats-io/k8s/tree/main/helm/charts/nats
nats:
  enabled: false
  cluster:
    enabled: true
    replicas: 3
  nats:
    image: "nats:2.3.1-alpine"
    jetstream:
      enabled: true
  
      memStorage:
        enabled: true
        size: "1Gi"
  
      fileStorage:
        enabled: true
        size: "2Gi"
        storageDirectory: /data/
        storageClassName: "local-path"

# Using default values from https://opensearch.org/docs/latest/install-and-configure/install-opensearch/helm/
opensearch:
  enabled: false
  # for testing environment you can use singleNode:
  # singleNode: true
  roles:
    - master
    - ingest
    - data
    #- remote_cluster_client
  config:
    opensearch.yml: |
      cluster.name: opensearch-cluster
      # Bind to all interfaces because we don't know what IP address Docker will assign to us.
      network.host: 0.0.0.0
      # Setting network.host to a non-loopback address enables the annoying bootstrap checks. "Single-node" mode disables them again.
      # Implicitly done if ".singleNode" is set to "true".
      # discovery.type: single-node
      plugins:
        security:
          disabled: true
  podAnnotations:
    helm.sh/hook: "pre-install"
    helm.sh/hook-weight: "-90"
  service:
    annotations:
      helm.sh/hook: "pre-install,post-delete"
      helm.sh/hook-weight: "-90"
      


dataMigration:
  reindexReporting:
    enable: true
    annotations: {}
    backoffLimit: 5
    affinity: {}
    nodeSelector: {}
    tolerations: {}

api_gateway:
  enabled: true
  podAnnotations: {}
  dashboard: false
  image:
    registry: docker.io
    repository: traefik
    tag: v2.5
    imagePullPolicy: IfNotPresent
  replicas: 1
  resources:
    limits:
      cpu: 600m
      memory: 1G
    requests:
      cpu: 600m
      memory: 512M
  affinity: {}
  nodeSelector: {}
  httpPort: 9080
  httpsPort: 9443
  service:
    name: mender-api-gateway
    annotations: {}
    type: ClusterIP
    httpPort: 80
    httpsPort: 443
  env:
    SSL: true
  minio:
    enabled: true
    podAnnotations: {}
    url: "http://minio:9000"
  rateLimit:
    average: 100
    burst: 100
    period: "1s"
    sourceCriterion:
      ipStrategy:
        depth: 1
  podSecurityContext:
    enabled: false
    runAsNonRoot: true
    runAsUser: 65534
  containerSecurityContext:
    enabled: false
    allowPrivilegeEscalation: false
    runAsUser: 65534

deployments:
  enabled: true
  podAnnotations: {}
  automigrate: true
  replicas: 1
  resources:
    limits:
      cpu: 300m
      memory: 128M
    requests:
      cpu: 300m
      memory: 64M
  affinity: {}
  directUpload:
    enabled: true
  daemonSchedule: "15 * * * *"
  image:
    registry: ""
    repository: ""
    imagePullPolicy: IfNotPresent
  nodeSelector: {}
  service:
    name: mender-deployments
    annotations: {}
    type: ClusterIP
    port: 8080
  env:
    DEPLOYMENTS_MIDDLEWARE: prod
    DEPLOYMENTS_PRESIGN_SECRET: ""
  podSecurityContext:
    enabled: false
    runAsNonRoot: true
    runAsUser: 65534
  containerSecurityContext:
    enabled: false
    allowPrivilegeEscalation: false
    runAsUser: 65534

device_auth:
  enabled: true
  podAnnotations: {}
  certs:
    key: {}
  automigrate: true
  replicas: 1
  resources:
    limits:
      cpu: 350m
      memory: 128M
    requests:
      cpu: 350m
      memory: 128M
  affinity: {}
  image:
    registry: ""
    repository: ""
    imagePullPolicy: IfNotPresent
  nodeSelector: {}
  service:
    name: mender-device-auth
    annotations: {}
    type: ClusterIP
    port: 8080
  env:
    DEVICEAUTH_INVENTORY_ADDR: http://mender-inventory:8080/
    DEVICEAUTH_ORCHESTRATOR_ADDR: http://mender-workflows-server:8080/
    DEVICEAUTH_JWT_ISSUER: Mender
    DEVICEAUTH_JWT_EXP_TIMEOUT: 604800
    DEVICEAUTH_MIDDLEWARE: prod
    DEVICEAUTH_REDIS_ADDR: "mender-redis:6379"
    DEVICEAUTH_REDIS_USERNAME: ""
    DEVICEAUTH_REDIS_PASSWORD: ""
    DEVICEAUTH_REDIS_DB: "1"
    DEVICEAUTH_REDIS_TIMEOUT_SEC: "1"
    DEVICEAUTH_REDIS_LIMITS_EXPIRE_SEC: "3600"
    DEVICEAUTH_TENANTADM_ADDR: http://mender-tenantadm:8080
  podSecurityContext:
    enabled: false
    runAsNonRoot: true
    runAsUser: 65534
  containerSecurityContext:
    enabled: false
    allowPrivilegeEscalation: false
    runAsUser: 65534

# Generate Delta Worker feature
# Experimental feature, still in beta
# will be released in the next Mender versions
generate_delta_worker:
  enabled: false
  podAnnotations: {}
  automigrate: true
  replicas: 1
  resources:
    limits:
      cpu: 100m
      memory: 1024M
    requests:
      cpu: 100m
      memory: 128M
  affinity: {}
  image:
    registry: registry.mender.io
    repository: mendersoftware/generate-delta-worker
    tag: mender-3.4.0
    imagePullPolicy: IfNotPresent
  nodeSelector: {}

gui:
  enabled: true
  podAnnotations: {}
  replicas: 1
  resources:
    limits:
      cpu: 20m
      memory: 64M
    requests:
      cpu: 5m
      memory: 16M
  affinity: {}
  image:
    registry: docker.io
    repository: mendersoftware/gui
    imagePullPolicy: IfNotPresent
  nodeSelector: {}
  service:
    name: mender-gui
    annotations: {}
    type: ClusterIP
    port: 80
  httpPort: 80
  podSecurityContext:
    enabled: false
    runAsNonRoot: true
    runAsUser: 65534
  containerSecurityContext:
    enabled: false
    allowPrivilegeEscalation: false
    runAsUser: 65534

inventory:
  enabled: true
  podAnnotations: {}
  automigrate: true
  replicas: 1
  resources:
    limits:
      cpu: 300m
      memory: 128M
    requests:
      cpu: 300m
      memory: 128M
  affinity: {}
  image:
    registry: ""
    repository: ""
    imagePullPolicy: IfNotPresent
  nodeSelector: {}
  service:
    name: mender-inventory
    annotations: {}
    type: ClusterIP
    port: 8080
  env:
    INVENTORY_MIDDLEWARE: prod
  podSecurityContext:
    enabled: false
    runAsNonRoot: true
    runAsUser: 65534
  containerSecurityContext:
    enabled: false
    allowPrivilegeEscalation: false
    runAsUser: 65534

tenantadm:
  enabled: true
  podAnnotations: {}
  certs:
    key: {}
  replicas: 1
  resources:
    limits:
      cpu: 150m
      memory: 128M
    requests:
      cpu: 150m
      memory: 64M
  affinity: {}
  image:
    registry: registry.mender.io
    repository: mendersoftware/tenantadm
    imagePullPolicy: IfNotPresent
  nodeSelector: {}
  service:
    name: mender-tenantadm
    annotations: {}
    type: ClusterIP
    port: 8080
  env:
    TENANTADM_DEFAULT_API_LIMITS: '{"management":{"bursts":[],"quota":{"max_calls":600,"interval_sec":60}},"devices":{"bursts":[{"action":"POST","uri":"/api/devices/v1/authentication","min_interval_sec":5},{"action":"GET","uri":"/api/devices/v1/deployments/device/deployments/next","min_interval_sec":5},{"action":"POST","uri":"/api/devices/v1/deployments/device/deployments/next","min_interval_sec":5},{"action":"POST","uri":"/api/devices/v2/deployments/device/deployments/next","min_interval_sec":5},{"action":"GET","uri":"/api/devices/v1/deviceconfig/configuration","min_interval_sec":5},{"action":"POST","uri":"/api/devices/v1/deviceconfig/configuration","min_interval_sec":5},{"action":"PATCH","uri":"/api/devices/v1/inventory/device/attributes","min_interval_sec":5},{"action":"PUT","uri":"/api/devices/v1/inventory/device/attributes","min_interval_sec":5},{"action":"POST","uri":"/api/devices/v1/devicemonitor/alert","min_interval_sec":5},{"action":"POST","uri":"/api/devices/v1/devicemonitor/alert","min_interval_sec":5},{"action":"POST","uri":"/api/devices/v1/devicemonitor/config","min_interval_sec":5}],"quota":{"max_calls":60,"interval_sec":60}}}'
    TENANTADM_MIDDLEWARE: prod
    TENANTADM_SERVER_PRIV_KEY_PATH: /etc/tenantadm/rsa/private.pem
    TENANTADM_ORCHESTRATOR_ADDR: http://mender-workflows-server:8080/
    TENANTADM_RECAPTCHA_URL_VERIFY: https://www.google.com/recaptcha/api/siteverify
  podSecurityContext:
    enabled: false
    runAsNonRoot: true
    runAsUser: 65534
  containerSecurityContext:
    enabled: false
    allowPrivilegeEscalation: false
    runAsUser: 65534

useradm:
  enabled: true
  podAnnotations: {}
  automigrate: true
  replicas: 1
  certs:
    key: {}
  resources:
    limits:
      cpu: 150m
      memory: 128M
    requests:
      cpu: 150m
      memory: 64M
  affinity: {}
  image:
    registry: ""
    repository: ""
    imagePullPolicy: IfNotPresent
  nodeSelector: {}
  service:
    name: mender-useradm
    annotations: {}
    type: ClusterIP
    port: 8080
  env:
    USERADM_PROXY_COUNT: 2
    USERADM_JWT_ISSUER: Mender Users
    USERADM_JWT_EXP_TIMEOUT: 604800
    USERADM_MIDDLEWARE: prod
    USERADM_REDIS_ADDR: "mender-redis:6379"
    USERADM_REDIS_USERNAME: ""
    USERADM_REDIS_PASSWORD: ""
    USERADM_REDIS_DB: "1"
    USERADM_REDIS_TIMEOUT_SEC: "1"
    USERADM_REDIS_LIMITS_EXPIRE_SEC: "3600"
    USERADM_TENANTADM_ADDR: http://mender-tenantadm:8080
    USERADM_TOTP_ISSUER: Mender
  podSecurityContext:
    enabled: false
    runAsNonRoot: true
    runAsUser: 65534
  containerSecurityContext:
    enabled: false
    allowPrivilegeEscalation: false
    runAsUser: 65534

workflows:
  enabled: true
  podAnnotations: {}
  automigrate: true
  replicas: 1
  resources:
    limits:
      cpu: 100m
      memory: 128M
    requests:
      cpu: 10m
      memory: 64M
  affinity: {}
  image:
    registry: ""
    repository: ""
    imagePullPolicy: IfNotPresent
  nodeSelector: {}
  service:
    name: mender-workflows-server
    annotations: {}
    type: ClusterIP
    port: 8080
  podSecurityContext:
    enabled: false
    runAsNonRoot: true
    runAsUser: 65534
  containerSecurityContext:
    enabled: false
    allowPrivilegeEscalation: false
    runAsUser: 65534

create_artifact_worker:
  enabled: true
  podAnnotations: {}
  automigrate: true
  replicas: 1
  resources:
    limits:
      cpu: 100m
      memory: 1024M
    requests:
      cpu: 100m
      memory: 128M
  affinity: {}
  image:
    registry: docker.io
    repository: mendersoftware/create-artifact-worker
    imagePullPolicy: IfNotPresent
  nodeSelector: {}
  podSecurityContext:
    enabled: false
    runAsNonRoot: true
    runAsUser: 65534
  containerSecurityContext:
    enabled: false
    allowPrivilegeEscalation: false
    runAsUser: 65534

auditlogs:
  enabled: true
  podAnnotations: {}
  automigrate: true
  replicas: 1
  resources:
    limits:
      cpu: 50m
      memory: 128M
    requests:
      cpu: 50m
      memory: 128M
  affinity: {}
  image:
    registry: registry.mender.io
    repository: mendersoftware/auditlogs
    imagePullPolicy: IfNotPresent
  nodeSelector: {}
  service:
    name: mender-auditlogs
    annotations: {}
    type: ClusterIP
    port: 8080
  podSecurityContext:
    enabled: false
    runAsNonRoot: true
    runAsUser: 65534
  containerSecurityContext:
    enabled: false
    allowPrivilegeEscalation: false
    runAsUser: 65534

iot_manager:
  enabled: true
  podAnnotations: {}
  automigrate: true
  replicas: 1
  resources:
    limits:
      cpu: 50m
      memory: 128M
    requests:
      cpu: 50m
      memory: 128M
  affinity: {}
  image:
    registry: docker.io
    repository: mendersoftware/iot-manager
    imagePullPolicy: IfNotPresent
  nodeSelector: {}
  service:
    name: mender-iot-manager
    annotations: {}
    type: ClusterIP
    port: 8080
  podSecurityContext:
    enabled: false
    runAsNonRoot: true
    runAsUser: 65534
  containerSecurityContext:
    enabled: false
    allowPrivilegeEscalation: false
    runAsUser: 65534

deviceconnect:
  enabled: true
  podAnnotations: {}
  automigrate: true
  replicas: 1
  resources:
    limits:
      cpu: 100m
      memory: 128M
    requests:
      cpu: 100m
      memory: 128M
  affinity: {}
  image:
    registry: docker.io
    repository: mendersoftware/deviceconnect
    imagePullPolicy: IfNotPresent
  nodeSelector: {}
  service:
    name: mender-deviceconnect
    annotations: {}
    type: ClusterIP
    port: 8080
  podSecurityContext:
    enabled: false
    runAsNonRoot: true
    runAsUser: 65534
  containerSecurityContext:
    enabled: false
    allowPrivilegeEscalation: false
    runAsUser: 65534

deviceconfig:
  enabled: true
  podAnnotations: {}
  automigrate: true
  replicas: 1
  resources:
    limits:
      cpu: 100m
      memory: 128M
    requests:
      cpu: 100m
      memory: 128M
  affinity: {}
  image:
    registry: docker.io
    repository: mendersoftware/deviceconfig
    imagePullPolicy: IfNotPresent
  nodeSelector: {}
  service:
    name: mender-deviceconfig
    annotations: {}
    type: ClusterIP
    port: 8080
  podSecurityContext:
    enabled: false
    runAsNonRoot: true
    runAsUser: 65534
  containerSecurityContext:
    enabled: false
    allowPrivilegeEscalation: false
    runAsUser: 65534

devicemonitor:
  enabled: true
  podAnnotations: {}
  automigrate: true
  replicas: 1
  resources:
    limits:
      cpu: 100m
      memory: 128M
    requests:
      cpu: 100m
      memory: 128M
  affinity: {}
  image:
    registry: registry.mender.io
    repository: mendersoftware/devicemonitor
    imagePullPolicy: IfNotPresent
  nodeSelector: {}
  service:
    name: mender-devicemonitor
    annotations: {}
    type: ClusterIP
    port: 8080
  podSecurityContext:
    enabled: false
    runAsNonRoot: true
    runAsUser: 65534
  containerSecurityContext:
    enabled: false
    allowPrivilegeEscalation: false
    runAsUser: 65534

redis:
  enabled: true
  replicas: 1
  resources:
    limits:
      cpu: 100m
      memory: 128M
    requests:
      cpu: 50m
      memory: 64M
  affinity: {}
  image:
    registry: docker.io
    repository: redis
    tag: 6.0.16-alpine
    imagePullPolicy: IfNotPresent
  service:
    name: mender-redis
    annotations: {}
    type: ClusterIP
    port: 6379
  podSecurityContext:
    enabled: false
    runAsNonRoot: true
    runAsUser: 999
  containerSecurityContext:
    enabled: false
    allowPrivilegeEscalation: false
    runAsUser: 999

dbmigration:
  enable: true
  annotations: {}
  backoffLimit: 5
  affinity: {}
  nodeSelector: {}
  podSecurityContext:
    enabled: false
    runAsNonRoot: true
    runAsUser: 999

# Feature preview: Device License Count
# Only available from version 3.6,
# and available in Mender Enterprise
device_license_count:
  enabled: false

{{- if .Values.deployments.enabled  }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployments
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: deployments
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: deployments
    app.kubernetes.io/part-of: mender
    helm.sh/chart: "{{ .Chart.Name }}"
spec:
  replicas: {{ .Values.deployments.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: deployments

  # if deployment is not completed within 10 min, consider it failed,
  # as result deployment Reason=ProgressDeadlineExceeded
  # needs to be big enough to rollout to complete
  progressDeadlineSeconds: 600

  # Rollout upgrade one by one
  # In this case we warranty there are always instances online.
  # In case any issues, they will be detected early and deployment be stopped.
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1

  template:
    metadata:
      labels:
        app.kubernetes.io/name: deployments
    spec:
      {{- with .Values.deployments.affinity }}
      affinity: {{ tpl (toYaml .) $ | nindent 8 }}
      {{- end }}

      containers:
      - name: deployments
      ***REMOVED*** {{ .Values.deployments.image.registry }}/{{ .Values.deployments.image.repository }}:{{ .Values.deployments.image.tag }}
        imagePullPolicy: {{ .Values.useradm.image.imagePullPolicy }}
        resources:
{{ toYaml .Values.deployments.resources | indent 10 }}

{{- if .Values.deployments.automigrate  }}
        args: ["server", "--automigrate"]
{{- else -}}
        args: ["server"]
{{- end }}

        # Perform periodic checks during pod startup period to determine
        # when it's ready and listening of specificed port.
        # readinessProbe:
        #   initialDelaySeconds: 10
        #   periodSeconds: 20
        #   tcpSocket:
        #     port: 8080

        env:
        - name: DEPLOYMENTS_MIDDLEWARE
          value: {{ .Values.deployments.env.DEPLOYMENTS_MIDDLEWARE | quote }}
        - name: DEPLOYMENTS_AWS_TAG_ARTIFACT
          value: {{ .Values.deployments.env.DEPLOYMENTS_AWS_TAG_ARTIFACT | quote }}

        # Supported configuration settings: https://github.com/mendersoftware/deployments/blob/master/config.yaml
        # Set in order, last value for the key will be used in case duplications.
        envFrom:
        - prefix: DEPLOYMENTS_
          secretRef:
            name: mongodb-common
        - prefix: DEPLOYMENTS_
          secretRef:
            name: s3-artifacts

{{- if .Values.global.image.username  }}
      imagePullSecrets:
      - name: docker-registry
{{- end }}
{{- end }}
